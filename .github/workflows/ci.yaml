name: CI — Build and Push to GHCR (no docker login)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: test-server
  TAG: ${{ github.sha }}
  DOCKER_BUILDKIT: "1"

jobs:
  build-and-push:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      # Tính sẵn owner lowercase và image refs
      - name: Compute image refs
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER_LC=$OWNER_LC" >> "$GITHUB_ENV"
          echo "BASE=$REGISTRY/$OWNER_LC/$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "IMAGE=$REGISTRY/$OWNER_LC/$IMAGE_NAME:$TAG" >> "$GITHUB_ENV"
          echo "IMAGE_LATEST=$REGISTRY/$OWNER_LC/$IMAGE_NAME:latest" >> "$GITHUB_ENV"

      # Cài skopeo/jq nếu thiếu (macOS/Linux)
      - name: Install skopeo & jq if missing
        run: |
          need_cmd() { command -v "$1" >/dev/null 2>&1 || MISSING="$MISSING $1"; }
          MISSING=""
          need_cmd skopeo; need_cmd jq
          if [ -z "$MISSING" ]; then
            skopeo --version; jq --version; exit 0
          fi
          echo "::group::Installing$MISSING"
          case "${RUNNER_OS}" in
            macOS)
              if ! command -v brew >/dev/null 2>&1; then
                echo "Homebrew not found. Install https://brew.sh"; exit 1
              fi
              brew update
              [[ "$MISSING" == *"skopeo"* ]] && brew install skopeo || true
              [[ "$MISSING" == *"jq"* ]] && brew install jq || true
              ;;
            Linux)
              if [ -f /etc/debian_version ]; then
                sudo apt-get update -y
                [[ "$MISSING" == *"skopeo"* ]] && sudo apt-get install -y skopeo || true
                [[ "$MISSING" == *"jq"* ]] && sudo apt-get install -y jq || true
              elif [ -f /etc/redhat-release ]; then
                if command -v dnf >/dev/null 2>&1; then
                  [[ "$MISSING" == *"skopeo"* ]] && sudo dnf install -y skopeo || true
                  [[ "$MISSING" == *"jq"* ]] && sudo dnf install -y jq || true
                else
                  [[ "$MISSING" == *"skopeo"* ]] && sudo yum install -y skopeo || true
                  [[ "$MISSING" == *"jq"* ]] && sudo yum install -y jq || true
                fi
              else
                echo "Unsupported Linux distro for auto-install. Please preinstall skopeo & jq."
                exit 1
              fi
              ;;
            *) echo "Unsupported OS ${RUNNER_OS}"; exit 1 ;;
          esac
          echo "::endgroup::"
          skopeo --version; jq --version

      # Check GHCR v2 challenge (401 Bearer là bình thường)
      - name: Debug GHCR connectivity
        run: |
          echo "--- /v2/ challenge (expect 401 with Bearer) ---"
          curl -sS -I https://ghcr.io/v2/ || true

      # Build image (tag theo GHCR path)
      - name: Build image
        run: |
          echo "Building $IMAGE"
          docker build -t "$IMAGE" .

      # Tạo authfile tạm cho skopeo dùng GH_TOKEN
      - name: Create skopeo authfile (GHCR)
        env:
          GH_USER: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          AUTH="$(printf '%s:%s' "$GH_USER" "$GH_TOKEN" | base64 | tr -d '\n')"
          cat > /tmp/auth.json <<EOF
          { "auths": { "ghcr.io": { "auth": "${AUTH}" } } }
          EOF
          chmod 600 /tmp/auth.json

      # Push tag SHA via skopeo
      - name: Push image (SHA) to GHCR
        run: |
          SRC="docker-daemon:${IMAGE}"
          DEST="docker://${IMAGE}"
          skopeo copy --dest-authfile /tmp/auth.json "$SRC" "$DEST"

      # Tag & push latest (nhánh main)
      - name: Tag & push latest
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag "$IMAGE" "$IMAGE_LATEST"
          skopeo copy --dest-authfile /tmp/auth.json \
            "docker-daemon:${IMAGE_LATEST}" "docker://${IMAGE_LATEST}"

      # Verify digests (có auth)
      - name: Verify pushed image
        env:
          GH_USER: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          skopeo inspect --no-tags --creds "${GH_USER}:${GH_TOKEN}" "docker://${IMAGE}" | jq -r '.Digest'
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            skopeo inspect --no-tags --creds "${GH_USER}:${GH_TOKEN}" "docker://${IMAGE_LATEST}" | jq -r '.Digest'
          fi

      # Dọn authfile
      - name: Cleanup authfile
        if: always()
        run: rm -f /tmp/auth.json || true
